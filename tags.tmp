!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHIVE	Makefile	/^ARCHIVE = ar rc$/;"	m
BUFFER_SIZE	get_next_line/get_next_line.h	/^# define BUFFER_SIZE /;"	d
CUB3D_H	cub3d.h	/^# define CUB3D_H$/;"	d
G	get_next_line/Makefile	/^G = gcc -Wall -Wextra -Werror$/;"	m
G	libft/Makefile	/^G = gcc -Wall -Wextra -Werror$/;"	m
G	linkedlist/Makefile	/^G = gcc -Wall -Wextra -Werror$/;"	m
G	map/Makefile	/^G = gcc -Wall -Wextra -Werror$/;"	m
GCC	Makefile	/^GCC = gcc -Wall -Wextra -Werror$/;"	m
GET_NEXT_LINEOB	Makefile	/^GET_NEXT_LINEOB = get_next_line\/*.o$/;"	m
GET_NEXT_LINE_H	get_next_line/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
LIBFTOB	Makefile	/^LIBFTOB = libft\/*.o$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LINKEDLIST_H	linkedlist/linkedlist.h	/^# define LINKEDLIST_H$/;"	d
LLOB	Makefile	/^LLOB = linkedlist\/*.o$/;"	m
MAKE	Makefile	/^MAKE = make -C$/;"	m
MAPOB	Makefile	/^MAPOB = map\/*.o$/;"	m
MAP_H	map/map.h	/^# define MAP_H$/;"	d
MAP_NAME	cub3d.c	/^#define MAP_NAME /;"	d	file:
MCF	Makefile	/^MCF =	cub3d.c \\$/;"	m
MOF	Makefile	/^MOF =	${MCF:.c=.o}$/;"	m
NAME	Makefile	/^NAME = cub3d.a$/;"	m
NAME	get_next_line/Makefile	/^NAME = get_next_line.a$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	linkedlist/Makefile	/^NAME = linkedlist.a$/;"	m
NAME	map/Makefile	/^NAME = map.a$/;"	m
O	get_next_line/Makefile	/^O =	${SRC:.c=.o}$/;"	m
O	libft/Makefile	/^O = ${SRC:.c=.o}$/;"	m
O	linkedlist/Makefile	/^O =	${SRC:.c=.o}$/;"	m
O	map/Makefile	/^O = ${SRC:.c=.o}$/;"	m
RM	Makefile	/^RM = rm -f$/;"	m
SRC	get_next_line/Makefile	/^SRC = get_next_line.c \\$/;"	m
SRC	libft/Makefile	/^SRC = ft_atoi.c \\$/;"	m
SRC	linkedlist/Makefile	/^SRC = linkedlist.c \\$/;"	m
SRC	map/Makefile	/^SRC = map.c \\$/;"	m
add	linkedlist/linkedlist_utils.c	/^void	add(t_data **head, void *data)$/;"	f
allocate_line	get_next_line/get_next_line_utils.c	/^int			allocate_line(char **line, char **buffer)$/;"	f
buffer	get_next_line/get_next_line.h	/^	char			*buffer;$/;"	m	struct:s_list
check_equality	libft/ft_strnstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_equality	libft/ft_strstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_map	map/map.c	/^static int		check_map(const char **strings)$/;"	f	file:
count_words	libft/ft_split.c	/^static	int		count_words(char const *s, char c)$/;"	f	file:
crgb	map/map.h	/^	int		crgb[3];$/;"	m	struct:s_map
data	linkedlist/linkedlist.h	/^	void			*data;$/;"	m	struct:s_data
ea	map/map.h	/^	char	*ea;$/;"	m	struct:s_map
error	linkedlist/helpers.c	/^void		error()$/;"	f
error_message	linkedlist/helpers.c	/^void		error_message(char *message)$/;"	f
fd	get_next_line/get_next_line.h	/^	int				fd;$/;"	m	struct:s_list
fill_c	map/fill_map_second.c	/^void		fill_c(t_map *map, const char **strings)$/;"	f
fill_ea	map/fill_map_second.c	/^void		fill_ea(t_map *map, const char **strings)$/;"	f
fill_f	map/fill_map_second.c	/^void		fill_f(t_map *map, const char **strings)$/;"	f
fill_map	map/fill_map_third.c	/^void		fill_map(t_map *map, const char **strings)$/;"	f
fill_no	map/fill_map_first.c	/^void	fill_no(t_map *map, const char **strings)$/;"	f
fill_r	map/fill_map_first.c	/^void	fill_r(t_map *map, const char **strings)$/;"	f
fill_s	map/fill_map_second.c	/^void		fill_s(t_map *map, const char **strings)$/;"	f
fill_so	map/fill_map_first.c	/^void	fill_so(t_map *map, const char **strings)$/;"	f
fill_we	map/fill_map_first.c	/^void	fill_we(t_map *map, const char **strings)$/;"	f
finish	linkedlist/helpers.c	/^void		finish()$/;"	f
free_node	linkedlist/linkedlist.c	/^void	free_node(t_data *node)$/;"	f
frgb	map/map.h	/^	int		frgb[3];$/;"	m	struct:s_map
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_dec2hex	libft/ft_dec2hex.c	/^char		*ft_dec2hex(size_t decimal)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isstrdigit	libft/ft_isstrdigit.c	/^int		ft_isstrdigit(const char *s)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(long n)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_onlyspaces	libft/ft_onlyspaces.c	/^int		ft_onlyspaces(const char *s)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^int		ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *h, const char *n, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char		*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/ft_dec2hex.c	/^static void	ft_strrev(char *str)$/;"	f	file:
ft_strstr	libft/ft_strstr.c	/^char		*ft_strstr(const char *h, const char *n)$/;"	f
ft_strtoupper	libft/ft_strtoupper.c	/^char		*ft_strtoupper(char *s)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim_helper	libft/ft_strtrim.c	/^static char	*ft_strtrim_helper(char const *s1, int start, int end)$/;"	f	file:
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
get_fd_buffer	get_next_line/get_next_line.c	/^static char		**get_fd_buffer(int fd, t_list **buffers)$/;"	f	file:
get_head_node	linkedlist/allocation.c	/^void		**get_head_node(void)$/;"	f
get_length	libft/ft_split.c	/^static	int		get_length(char const *s, int c, int start)$/;"	f	file:
get_next_line	get_next_line/get_next_line.c	/^int				get_next_line(int fd, char **line)$/;"	f
have_a_newline	get_next_line/get_next_line_utils.c	/^int			have_a_newline(char *str)$/;"	f
height	map/map.h	/^	int		height;$/;"	m	struct:s_map
hexer	libft/ft_dec2hex.c	/^static char	*hexer(int l)$/;"	f	file:
integer_length	libft/ft_putnbr_fd.c	/^static int	integer_length(int nb)$/;"	f	file:
is_set	libft/ft_strtrim.c	/^static int	is_set(char const *set, char c)$/;"	f	file:
l_lstnew	get_next_line/get_next_line_utils.c	/^t_list		*l_lstnew(int fd)$/;"	f
l_lstremove	get_next_line/get_next_line.c	/^static void		l_lstremove(int fd, t_list **buffers)$/;"	f	file:
l_lstremove_afterhead	get_next_line/get_next_line.c	/^static void		l_lstremove_afterhead(int fd, t_list *node)$/;"	f	file:
line_allocation	get_next_line/get_next_line.c	/^static int		line_allocation(t_list **bs, char **li, char **buf, int fd)$/;"	f	file:
lst_add_back	linkedlist/linkedlist.c	/^void	lst_add_back(t_data **head, t_data *node)$/;"	f
lst_add_front	linkedlist/linkedlist.c	/^void	lst_add_front(t_data **head, t_data *node)$/;"	f
lst_clear	linkedlist/linkedlist.c	/^void	lst_clear(t_data *head)$/;"	f
lst_last	linkedlist/linkedlist.c	/^t_data	*lst_last(t_data *node)$/;"	f
main	cub3d.c	/^int		main(void)$/;"	f
main	map/test.c	/^int		main(void)$/;"	f
map_width	map/map.h	/^	int		map_width;$/;"	m	struct:s_map
maparr	map/map.h	/^	char	*maparr;$/;"	m	struct:s_map
negative_condition	libft/ft_itoa.c	/^static char	*negative_condition(long n)$/;"	f	file:
new_map	map/map.c	/^static t_map	*new_map(void)$/;"	f	file:
new_node	linkedlist/linkedlist_utils.c	/^t_data	*new_node(void *data)$/;"	f
next	get_next_line/get_next_line.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	linkedlist/linkedlist.h	/^	struct s_data	*next;$/;"	m	struct:s_data	typeref:struct:s_data::s_data
no	map/map.h	/^	char	*no;$/;"	m	struct:s_map
norminette_helper	libft/ft_split.c	/^static	char	**norminette_helper(char const *s, char c, char **str, int j)$/;"	f	file:
numlen	libft/ft_itoa.c	/^static long	numlen(long n)$/;"	f	file:
power_ten	libft/ft_putnbr_fd.c	/^static int	power_ten(int power)$/;"	f	file:
read_map	map/map.c	/^t_map			*read_map(const char *file_name)$/;"	f
rgb_toint	helpers.c	/^int		rgb_toint(int r, int g, int b)$/;"	f
rgbstr_to_rgbint	map/fill_map_second.c	/^static void	rgbstr_to_rgbint(int *rgbint, char *rgbstr)$/;"	f	file:
s	map/map.h	/^	char	*s;$/;"	m	struct:s_map
s_data	linkedlist/linkedlist.h	/^typedef struct	s_data$/;"	s
s_list	get_next_line/get_next_line.h	/^typedef	struct	s_list$/;"	s
s_map	map/map.h	/^typedef struct	s_map$/;"	s
so	map/map.h	/^	char	*so;$/;"	m	struct:s_map
str_allocation	libft/ft_split.c	/^static	char	*str_allocation(char const *s, char c, int start)$/;"	f	file:
str_join	get_next_line/get_next_line_utils.c	/^char		*str_join(char *buffer, char *tmp, int read_return, int i)$/;"	f
sub_str	get_next_line/get_next_line_utils.c	/^char		*sub_str(char const *s, unsigned int start)$/;"	f
t_data	linkedlist/linkedlist.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_list	get_next_line/get_next_line.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_map	map/map.h	/^}				t_map;$/;"	t	typeref:struct:s_map
we	map/map.h	/^	char	*we;$/;"	m	struct:s_map
width	map/map.h	/^	int		width;$/;"	m	struct:s_map
xfree	linkedlist/allocation.c	/^void		xfree(void *data)$/;"	f
xfree_after_head	linkedlist/allocation.c	/^static int	xfree_after_head(t_data *node, void *data)$/;"	f	file:
xmalloc	linkedlist/allocation.c	/^void		*xmalloc(size_t size)$/;"	f
xstrdup	linkedlist/allocation.c	/^char		*xstrdup(const char *s)$/;"	f
zero_condition	libft/ft_itoa.c	/^static char	*zero_condition(void)$/;"	f	file:
