!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AUDIO_PLAYER	cub3d.h	/^# define AUDIO_PLAYER /;"	d
BUFFER_SIZE	get_next_line/get_next_line.h	/^# define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	game_map/Makefile	/^CC = gcc$/;"	m
CC	get_next_line/Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CC	linkedlist/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra \\$/;"	m
CFLAGS	game_map/Makefile	/^CFLAGS = -Wall -Werror -Wextra \\$/;"	m
CFLAGS	get_next_line/Makefile	/^CFLAGS = -Wall -Wextra -Werror \\$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	linkedlist/Makefile	/^CFLAGS = -Wall -Werror -Wextra \\$/;"	m
COLOR_BLACK	cub3d.h	/^# define COLOR_BLACK /;"	d
COLOR_ORANGE	cub3d.h	/^# define COLOR_ORANGE /;"	d
COLOR_RED	cub3d.h	/^# define COLOR_RED /;"	d
COLOR_WHITE	cub3d.h	/^# define COLOR_WHITE /;"	d
CUB3D_H	cub3d.h	/^# define CUB3D_H$/;"	d
EXTENSION_ERR	game_map/map_extension.c	/^#define EXTENSION_ERR /;"	d	file:
FALSE	game_map/map.h	/^# define FALSE /;"	d
FOV_ANGLE	cub3d.h	/^# define FOV_ANGLE /;"	d
GET_NEXT_LINE_H	get_next_line/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
INT_MAX	cub3d.h	/^# define INT_MAX /;"	d
KEY_0	cub3d.h	/^# define KEY_0 /;"	d
KEY_1	cub3d.h	/^# define KEY_1 /;"	d
KEY_2	cub3d.h	/^# define KEY_2 /;"	d
KEY_3	cub3d.h	/^# define KEY_3 /;"	d
KEY_4	cub3d.h	/^# define KEY_4 /;"	d
KEY_5	cub3d.h	/^# define KEY_5 /;"	d
KEY_6	cub3d.h	/^# define KEY_6 /;"	d
KEY_7	cub3d.h	/^# define KEY_7 /;"	d
KEY_8	cub3d.h	/^# define KEY_8 /;"	d
KEY_9	cub3d.h	/^# define KEY_9 /;"	d
KEY_A	cub3d.h	/^# define KEY_A /;"	d
KEY_C	cub3d.h	/^# define KEY_C /;"	d
KEY_D	cub3d.h	/^# define KEY_D /;"	d
KEY_DOWN_ARROW	cub3d.h	/^# define KEY_DOWN_ARROW /;"	d
KEY_ESC	cub3d.h	/^# define KEY_ESC /;"	d
KEY_LEFT_ARROW	cub3d.h	/^# define KEY_LEFT_ARROW /;"	d
KEY_M	cub3d.h	/^# define KEY_M /;"	d
KEY_O	cub3d.h	/^# define KEY_O /;"	d
KEY_P	cub3d.h	/^# define KEY_P /;"	d
KEY_RIGHT_ARROW	cub3d.h	/^# define KEY_RIGHT_ARROW /;"	d
KEY_S	cub3d.h	/^# define KEY_S /;"	d
KEY_UP_ARROW	cub3d.h	/^# define KEY_UP_ARROW /;"	d
KEY_W	cub3d.h	/^# define KEY_W /;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS = libft\/libft.a \\$/;"	m
LINKEDLIST_H	linkedlist/linkedlist.h	/^# define LINKEDLIST_H$/;"	d
MAKE	Makefile	/^MAKE = make -C$/;"	m
MAP_H	game_map/map.h	/^# define MAP_H$/;"	d
MAX_SONGS	cub3d.h	/^# define MAX_SONGS /;"	d
MAX_WINDOW_HEIGHT	game_map/map.h	/^# define MAX_WINDOW_HEIGHT /;"	d
MAX_WINDOW_WIDTH	game_map/map.h	/^# define MAX_WINDOW_WIDTH /;"	d
MIN_WINDOW_HEIGHT	game_map/map.h	/^# define MIN_WINDOW_HEIGHT /;"	d
MIN_WINDOW_WIDTH	game_map/map.h	/^# define MIN_WINDOW_WIDTH /;"	d
NAME	Makefile	/^NAME = cub3D$/;"	m
NAME	game_map/Makefile	/^NAME = libmap.a$/;"	m
NAME	get_next_line/Makefile	/^NAME = libget_next_line.a$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	linkedlist/Makefile	/^NAME = liblinkedlist.a$/;"	m
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	game_map/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	get_next_line/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	libft/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	linkedlist/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
SRC	Makefile	/^SRC = cub3d.c \\$/;"	m
SRC	game_map/Makefile	/^SRC = map.c \\$/;"	m
SRC	get_next_line/Makefile	/^SRC = get_next_line.c \\$/;"	m
SRC	libft/Makefile	/^SRC = ft_atoi.c \\$/;"	m
SRC	linkedlist/Makefile	/^SRC = linkedlist.c \\$/;"	m
TILE_SIZE	game_map/map.h	/^# define TILE_SIZE /;"	d
TRUE	game_map/map.h	/^# define TRUE /;"	d
WINDOW_NAME	game_map/map.h	/^# define WINDOW_NAME /;"	d
add	linkedlist/linkedlist_utils.c	/^void	add(t_data **head, void *data)$/;"	f
add_double_pointer	linkedlist/linkedlist_utils.c	/^void	add_double_pointer(char **ptr)$/;"	f
add_sp	game_map/map_wall.c	/^static void			add_sp(char *line, unsigned int start, unsigned int end)$/;"	f	file:
allocate_line	get_next_line/get_next_line_utils.c	/^int			allocate_line(char **line, char **buffer)$/;"	f
audio_binding	audio.c	/^void	audio_binding(int key)$/;"	f
bit_count	cub3d.h	/^	uint16_t	bit_count;$/;"	m	struct:s_bitmapheader
buffer	get_next_line/get_next_line.h	/^	char			*buffer;$/;"	m	struct:s_list
cast	cast.c	/^void		cast(t_ray *ray)$/;"	f
cast_all_rays	rays_methods.c	/^void	cast_all_rays(void)$/;"	f
ceilling_projection	projection_helper.c	/^void	ceilling_projection(int col, t_wall *wall)$/;"	f
check_allfilled	game_map/check_allfilled.c	/^void	check_allfilled(t_map *map)$/;"	f
check_equality	libft/ft_strnstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_equality	libft/ft_strstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_file_extension	game_map/map_extension.c	/^void	check_file_extension(const char *file_name)$/;"	f
check_horz_collision	horz_intersection.c	/^static int	check_horz_collision($/;"	f	file:
check_map	game_map/fill_map_third.c	/^static int		check_map(t_map *map, const char *line, int *p)$/;"	f	file:
check_vert_collision	vert_intersection.c	/^static int	check_vert_collision($/;"	f	file:
collision_binding	bonus_binding.c	/^void	collision_binding(int key)$/;"	f
cols	game_map/map.h	/^	int		cols;$/;"	m	struct:s_map
correct_wall_distance	cub3d.h	/^	float		correct_wall_distance;$/;"	m	struct:s_wall
count_words	libft/ft_split.c	/^static	int		count_words(char const *s, char c)$/;"	f	file:
crgb	game_map/map.h	/^	int		crgb[3];$/;"	m	struct:s_map
data	linkedlist/linkedlist.h	/^	void			*data;$/;"	m	struct:s_data
dist	game_map/map.h	/^	float	dist;$/;"	m	struct:s_sp
distance	cub3d.h	/^	float	distance;$/;"	m	struct:s_ray
distance_between_points	math_helper.c	/^float	distance_between_points(t_point p1, t_point p2)$/;"	f
distance_proj_plane	cub3d.h	/^	float		distance_proj_plane;$/;"	m	struct:s_wall
down	game_map/map.h	/^	char	down;$/;"	m	struct:s_direction
draw_minimap	map_methods.c	/^void		draw_minimap(int x, int y)$/;"	f
draw_sprite	sprite_methods.c	/^static void	draw_sprite(int x, float distance, float height)$/;"	f	file:
draw_sprite_minimap	map_methods.c	/^static void	draw_sprite_minimap(int x, int y)$/;"	f	file:
ea	game_map/map.h	/^	t_image	*ea;$/;"	m	struct:s_map
error	linkedlist/error.c	/^void	error(void)$/;"	f
error_map	linkedlist/error.c	/^void	error_map(const char *file_name, const char *message)$/;"	f
error_message	linkedlist/error.c	/^void	error_message(const char *message)$/;"	f
error_special	linkedlist/error.c	/^void	error_special(const char *message)$/;"	f
f_mod	math_helper.c	/^float	f_mod(float a, float b)$/;"	f
fd	cub3d.h	/^	int			fd;$/;"	m	struct:s_bitmapheader
fd	game_map/map.h	/^	int		fd;$/;"	m	struct:s_localmap
fd	get_next_line/get_next_line.h	/^	int				fd;$/;"	m	struct:s_list
file_size	cub3d.h	/^	uint32_t	file_size;$/;"	m	struct:s_bitmapheader
fill_c	game_map/fill_map_second.c	/^void		fill_c(t_map *map, const char **arglst)$/;"	f
fill_directions	game_map/fill_directions.c	/^int					fill_directions(char *previous, char *current, char *next)$/;"	f
fill_ea	game_map/fill_map_second.c	/^void		fill_ea(t_map *map, const char **arglst)$/;"	f
fill_f	game_map/fill_map_second.c	/^void		fill_f(t_map *map, const char **arglst)$/;"	f
fill_map	game_map/fill_map_third.c	/^void			fill_map(t_map *map, t_data **maparr, const char *line, int *p)$/;"	f
fill_map_withspaces	game_map/map_wall.c	/^static void			fill_map_withspaces(t_data *maparr, int map_width)$/;"	f	file:
fill_maparr	game_map/fill_map.c	/^void	fill_maparr(t_map *map, t_data *maparr)$/;"	f
fill_no	game_map/fill_map_first.c	/^void		fill_no(t_map *map, const char **arglst)$/;"	f
fill_r	game_map/fill_map_first.c	/^void		fill_r(t_map *map, const char **arglst)$/;"	f
fill_r_norm	game_map/fill_map_first.c	/^static void	fill_r_norm(t_map *map, const char **arglst, int i, int *position)$/;"	f	file:
fill_ray_horz	cast.c	/^static void	fill_ray_horz(t_ray *ray, t_horz *horz, float horz_hit_distance)$/;"	f	file:
fill_ray_vert	cast.c	/^static void	fill_ray_vert(t_ray *ray, t_vert *vert, float vert_hit_distance)$/;"	f	file:
fill_s	game_map/fill_map_second.c	/^void		fill_s(t_map *map, const char **arglst)$/;"	f
fill_so	game_map/fill_map_first.c	/^void		fill_so(t_map *map, const char **arglst)$/;"	f
fill_we	game_map/fill_map_first.c	/^void		fill_we(t_map *map, const char **arglst)$/;"	f
floor_projection	projection_helper.c	/^void	floor_projection(int col, t_wall *wall)$/;"	f
found_horz_wall_hit	cub3d.h	/^	int		found_horz_wall_hit;$/;"	m	struct:s_horz
found_vert_wall_hit	cub3d.h	/^	int		found_vert_wall_hit;$/;"	m	struct:s_vert
free_node	linkedlist/linkedlist.c	/^void	free_node(t_data *node)$/;"	f
frgb	game_map/map.h	/^	int		frgb[3];$/;"	m	struct:s_map
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_countchar	libft/ft_countchar.c	/^int		ft_countchar(const char *s, char c)$/;"	f
ft_dec2hex	libft/ft_dec2hex.c	/^char		*ft_dec2hex(size_t decimal)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isstrdigit	libft/ft_isstrdigit.c	/^int		ft_isstrdigit(const char *s)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(long n)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_onlyspaces	libft/ft_onlyspaces.c	/^int		ft_onlyspaces(const char *s)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(const char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(const char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(const char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *h, const char *n, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char		*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/ft_dec2hex.c	/^static void	ft_strrev(char *str)$/;"	f	file:
ft_strstr	libft/ft_strstr.c	/^char		*ft_strstr(const char *h, const char *n)$/;"	f
ft_strtoupper	libft/ft_strtoupper.c	/^char		*ft_strtoupper(char *s)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim_helper	libft/ft_strtrim.c	/^static char	*ft_strtrim_helper(char const *s1, int start, int end)$/;"	f	file:
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
game	game_map/map_helper.c	/^t_map			*game(void)$/;"	f
game_exit	game.c	/^void		game_exit(int signal)$/;"	f
get_colors	screenshot.c	/^int		*get_colors(int color)$/;"	f
get_fd_buffer	get_next_line/get_next_line.c	/^static char		**get_fd_buffer(int fd, t_list **buffers)$/;"	f	file:
get_head_node	linkedlist/allocation.c	/^t_data		**get_head_node(void)$/;"	f
get_initial_angle	player.c	/^static float	get_initial_angle(void)$/;"	f	file:
get_length	libft/ft_split.c	/^static	int		get_length(char const *s, int c, int start)$/;"	f	file:
get_mlx	game_map/map_helper.c	/^void			*get_mlx(void)$/;"	f
get_next_line	get_next_line/get_next_line.c	/^int				get_next_line(int fd, char **line)$/;"	f
gettxt	txt.c	/^t_txt	*gettxt(void)$/;"	f
global_binding	binding.c	/^void	global_binding(int key)$/;"	f
h	game_map/map.h	/^	int		h;$/;"	m	struct:s_image
has_hidden_wall_at	collision.c	/^int		has_hidden_wall_at(float x, float y)$/;"	f
has_player_at	collision.c	/^int		has_player_at(float x, float y)$/;"	f
has_sprite_at	collision.c	/^int		has_sprite_at(float x, float y)$/;"	f
has_wall_at	collision.c	/^int		has_wall_at(float x, float y)$/;"	f
have_a_newline	get_next_line/get_next_line_utils.c	/^int			have_a_newline(char *str)$/;"	f
height	cub3d.h	/^	float	height;$/;"	m	struct:s_player
height	cub3d.h	/^	int		height;$/;"	m	struct:s_txt
height	cub3d.h	/^	int32_t		height;$/;"	m	struct:s_bitmapheader
hexer	libft/ft_dec2hex.c	/^static char	*hexer(int l)$/;"	f	file:
horizontal_intersection	horz_intersection.c	/^void		horizontal_intersection(t_ray *ray, t_horz *horz)$/;"	f
horz_wall_content	cub3d.h	/^	int		horz_wall_content;$/;"	m	struct:s_horz
horz_wall_hit_x	cub3d.h	/^	float	horz_wall_hit_x;$/;"	m	struct:s_horz
horz_wall_hit_y	cub3d.h	/^	float	horz_wall_hit_y;$/;"	m	struct:s_horz
i	game_map/map.h	/^	int		i;$/;"	m	struct:s_localmap
id_count	game_map/map.h	/^	int		id_count;$/;"	m	struct:s_localmap
image_size	cub3d.h	/^	uint32_t	image_size;$/;"	m	struct:s_bitmapheader
img	cub3d.h	/^	void	*img;$/;"	m	struct:s_txt
img	game_map/map.h	/^	void	*img;$/;"	m	struct:s_image
img	game_map/map.h	/^	void *img;$/;"	m	struct:s_vars
info_size	cub3d.h	/^	uint32_t	info_size;$/;"	m	struct:s_bitmapheader
init_localmap	game_map/map_utils.c	/^t_localmap	*init_localmap(void)$/;"	f
initial_pos	game_map/map.h	/^	int		initial_pos[2];$/;"	m	struct:s_map
input_handler	input.c	/^int			input_handler(void)$/;"	f
integer_length	libft/ft_putnbr_fd.c	/^static int	integer_length(int nb)$/;"	f	file:
is_audio_running	game_map/map.h	/^	int		is_audio_running;$/;"	m	struct:s_map
is_collision_enabled	game_map/map.h	/^	int		is_collision_enabled;$/;"	m	struct:s_map
is_inside_map	protection.c	/^int		is_inside_map(float x, float y)$/;"	f
is_inside_sprite	protection.c	/^int		is_inside_sprite(float x, float y, int width, int height)$/;"	f
is_inside_texture	protection.c	/^int		is_inside_texture(float x, float y, int width, int height)$/;"	f
is_inside_window	protection.c	/^int		is_inside_window(float x, float y)$/;"	f
is_map_walls_closed	game_map/map_wall.c	/^int					is_map_walls_closed(t_map *map, t_data *maparr)$/;"	f
is_minimap_enabled	game_map/map.h	/^	int		is_minimap_enabled;$/;"	m	struct:s_map
is_ray_facing_down	cub3d.h	/^	int		is_ray_facing_down;$/;"	m	struct:s_ray
is_ray_facing_left	cub3d.h	/^	int		is_ray_facing_left;$/;"	m	struct:s_ray
is_ray_facing_right	cub3d.h	/^	int		is_ray_facing_right;$/;"	m	struct:s_ray
is_ray_facing_up	cub3d.h	/^	int		is_ray_facing_up;$/;"	m	struct:s_ray
is_set	libft/ft_strtrim.c	/^static int	is_set(char const *set, char c)$/;"	f	file:
l_lstnew	get_next_line/get_next_line_utils.c	/^t_list		*l_lstnew(int fd)$/;"	f
l_lstremove	get_next_line/get_next_line.c	/^static void		l_lstremove(int fd, t_list **buffers)$/;"	f	file:
l_lstremove_afterhead	get_next_line/get_next_line.c	/^static void		l_lstremove_afterhead(int fd, t_list *node)$/;"	f	file:
left	cub3d.h	/^	int		left;$/;"	m	struct:s_player
left	game_map/map.h	/^	char	left;$/;"	m	struct:s_direction
length	game_map/fill_map.c	/^int		length(const char **array)$/;"	f
line	draw.c	/^void	line(t_point p0, t_point p1, int color)$/;"	f
line	game_map/map.h	/^	char	*line;$/;"	m	struct:s_localmap
line_allocation	get_next_line/get_next_line.c	/^static int		line_allocation(t_list **bs, char **li, char **buf, int fd)$/;"	f	file:
line_end	game_map/map.h	/^	int		line_end;$/;"	m	struct:s_localmap
linkedlist_bubble_sort	sprite_methods.c	/^void		linkedlist_bubble_sort(t_data *head)$/;"	f
look	cub3d.h	/^	int		look;$/;"	m	struct:s_player
lst_add_back	linkedlist/linkedlist.c	/^void	lst_add_back(t_data **head, t_data *node)$/;"	f
lst_add_front	linkedlist/linkedlist.c	/^void	lst_add_front(t_data **head, t_data *node)$/;"	f
lst_clear	linkedlist/linkedlist.c	/^void	lst_clear(t_data *head)$/;"	f
lst_last	linkedlist/linkedlist.c	/^t_data	*lst_last(t_data *node)$/;"	f
lst_size	linkedlist/linkedlist_utils.c	/^int		lst_size(t_data *head)$/;"	f
main	cub3d.c	/^int			main(int argc, char **argv)$/;"	f
make_bmp_header	screenshot.c	/^char	*make_bmp_header(t_bitmapheader *header)$/;"	f
make_img_buff	screenshot.c	/^char	*make_img_buff(t_bitmapheader *header)$/;"	f
map	game_map/map.h	/^	t_map	*map;$/;"	m	struct:s_localmap
map_double	game_map/map_helper.c	/^static t_map	**map_double(void)$/;"	f	file:
map_height	game_map/map.h	/^	int		map_height;$/;"	m	struct:s_map
map_init	game_map/map_helper.c	/^void			map_init(const char *map_name)$/;"	f
map_reached	game_map/map.h	/^	int		map_reached;$/;"	m	struct:s_localmap
map_time	game_map/map.h	/^	int		map_time;$/;"	m	struct:s_localmap
map_width	game_map/map.h	/^	int		map_width;$/;"	m	struct:s_map
maparr	game_map/map.h	/^	char	*maparr;$/;"	m	struct:s_map
maparr	game_map/map.h	/^	t_data	*maparr;$/;"	m	struct:s_localmap
minimap_binding	binding.c	/^void	minimap_binding(int key)$/;"	f
minimap_render	map_methods.c	/^void		minimap_render(void)$/;"	f
minimap_resezing_binding	binding.c	/^void	minimap_resezing_binding(int key)$/;"	f
minimap_scale	game_map/map.h	/^	float	minimap_scale;$/;"	m	struct:s_map
minimap_sprite_render	map_methods.c	/^void		minimap_sprite_render(void)$/;"	f
mlx	game_map/map.h	/^	void *mlx;$/;"	m	struct:s_vars
move_forward_or_backward	cub3d.h	/^	int		move_forward_or_backward;$/;"	m	struct:s_player
move_forwback	movement.c	/^void	move_forwback(float *nplayer_x, float *nplayer_y)$/;"	f
move_left	movement.c	/^void	move_left(float *nplayer_x, float *nplayer_y)$/;"	f
move_player	player_methods.c	/^void		move_player(void)$/;"	f
move_right	movement.c	/^void	move_right(float *nplayer_x, float *nplayer_y)$/;"	f
movement_binding	binding.c	/^void	movement_binding(int key)$/;"	f
name	game_map/map.h	/^	char	*name;$/;"	m	struct:s_map
negative_condition	libft/ft_itoa.c	/^static char	*negative_condition(long n)$/;"	f	file:
new_map	game_map/map_utils.c	/^t_map		*new_map(void)$/;"	f
new_node	linkedlist/linkedlist_utils.c	/^t_data	*new_node(void *data)$/;"	f
new_sprite	game_map/sprite.c	/^static t_sp	*new_sprite(int x, int y)$/;"	f	file:
next	get_next_line/get_next_line.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	linkedlist/linkedlist.h	/^	struct s_data	*next;$/;"	m	struct:s_data	typeref:struct:s_data::s_data
next_horz_touch_x	cub3d.h	/^	float	next_horz_touch_x;$/;"	m	struct:s_horz
next_horz_touch_y	cub3d.h	/^	float	next_horz_touch_y;$/;"	m	struct:s_horz
next_vert_touch_x	cub3d.h	/^	float	next_vert_touch_x;$/;"	m	struct:s_vert
next_vert_touch_y	cub3d.h	/^	float	next_vert_touch_y;$/;"	m	struct:s_vert
no	game_map/map.h	/^	t_image	*no;$/;"	m	struct:s_map
norm	game_map/fill_directions.c	/^static void			norm(t_direction *dire, char *previous,$/;"	f	file:
normalize_angle	math_helper.c	/^float	normalize_angle(float angle)$/;"	f
norminette_helper	libft/ft_split.c	/^static	char	**norminette_helper(char const *s, char c, char **str, int j)$/;"	f	file:
num_rays	game_map/map.h	/^	int		num_rays;$/;"	m	struct:s_map
numlen	libft/ft_itoa.c	/^static long	numlen(long n)$/;"	f	file:
off_bits	cub3d.h	/^	uint32_t	off_bits;$/;"	m	struct:s_bitmapheader
on_key_pressed	input.c	/^static int	on_key_pressed(int key, void *param)$/;"	f	file:
on_key_released	input.c	/^static int	on_key_released(int key, void *param)$/;"	f	file:
on_window_closed	input.c	/^static int	on_window_closed(void)$/;"	f	file:
pixel_get	mlx_helper.c	/^int		pixel_get(float x, float y)$/;"	f
pixel_put	mlx_helper.c	/^void	pixel_put(float x, float y, int color)$/;"	f
planes	cub3d.h	/^	uint16_t	planes;$/;"	m	struct:s_bitmapheader
play_audio	audio.c	/^void	play_audio(int id)$/;"	f
play_audio	game_map/audio.c	/^void	play_audio(int id)$/;"	f
player	player.c	/^t_player		*player(void)$/;"	f
player_init	player.c	/^static t_player	*player_init(void)$/;"	f	file:
player_render	player_methods.c	/^void		player_render(void)$/;"	f
player_state	game_map/map.h	/^	int		player_state;$/;"	m	struct:s_localmap
power_ten	libft/ft_putnbr_fd.c	/^static int	power_ten(int power)$/;"	f	file:
projection	projection.c	/^static void	projection(t_ray *ray, int col)$/;"	f	file:
pview	game_map/map.h	/^	char	pview;$/;"	m	struct:s_map
ray_angle	cub3d.h	/^	float	ray_angle;$/;"	m	struct:s_ray
rays	rays.c	/^t_ray	**rays(void)$/;"	f
rays_init	rays.c	/^void	rays_init(void)$/;"	f
rays_render	rays_methods.c	/^void	rays_render(void)$/;"	f
read_map	game_map/map.c	/^t_map			*read_map(const char *file_name)$/;"	f
read_map_1	game_map/map.c	/^static void		read_map_1(t_localmap *localmap)$/;"	f	file:
read_map_2	game_map/map.c	/^static int		read_map_2(t_localmap *localmap)$/;"	f	file:
read_map_3	game_map/map.c	/^static int		read_map_3(t_localmap *localmap)$/;"	f	file:
read_map_4	game_map/map.c	/^static int		read_map_4(t_localmap *localmap)$/;"	f	file:
read_map_5	game_map/map_norm.c	/^void		read_map_5(t_localmap *localmap)$/;"	f
read_map_6	game_map/map_norm.c	/^void		read_map_6(t_localmap *localmap)$/;"	f
rect	draw.c	/^void	rect(t_point p, int width, int height, int color)$/;"	f
release_sprites	release_sprites.c	/^void		release_sprites(void)$/;"	f
release_textures	txt.c	/^void	release_textures(void)$/;"	f
render	game.c	/^void		render(void)$/;"	f
render_projection_walls	projection.c	/^void		render_projection_walls(void)$/;"	f
render_sprites	sprite_methods.c	/^void		render_sprites(void)$/;"	f
rgb	draw.c	/^int		rgb(int r, int g, int b)$/;"	f
rgbstr_to_rgbint	game_map/fill_map_second.c	/^static void	rgbstr_to_rgbint(int *rgbint, char *rgbstr, t_map *map)$/;"	f	file:
right	cub3d.h	/^	int		right;$/;"	m	struct:s_player
right	game_map/map.h	/^	char	right;$/;"	m	struct:s_direction
rotate	movement.c	/^void	rotate(void)$/;"	f
rotation_angle	cub3d.h	/^	float	rotation_angle;$/;"	m	struct:s_player
rotation_binding	binding.c	/^void	rotation_binding(int key)$/;"	f
rows	game_map/map.h	/^	int		rows;$/;"	m	struct:s_map
s	game_map/map.h	/^	t_image	*s;$/;"	m	struct:s_map
s_bitmapheader	cub3d.h	/^typedef struct	s_bitmapheader$/;"	s
s_data	linkedlist/linkedlist.h	/^typedef struct	s_data$/;"	s
s_direction	game_map/map.h	/^typedef struct	s_direction$/;"	s
s_horz	cub3d.h	/^typedef struct	s_horz$/;"	s
s_image	game_map/map.h	/^typedef struct	s_image$/;"	s
s_list	get_next_line/get_next_line.h	/^typedef	struct	s_list$/;"	s
s_localmap	game_map/map.h	/^typedef struct	s_localmap$/;"	s
s_map	game_map/map.h	/^typedef struct	s_map$/;"	s
s_player	cub3d.h	/^typedef struct	s_player$/;"	s
s_point	cub3d.h	/^typedef struct	s_point$/;"	s
s_ray	cub3d.h	/^typedef struct	s_ray$/;"	s
s_sp	game_map/map.h	/^typedef struct	s_sp$/;"	s
s_txt	cub3d.h	/^typedef struct	s_txt$/;"	s
s_vars	game_map/map.h	/^typedef struct	s_vars$/;"	s
s_vert	cub3d.h	/^typedef struct	s_vert$/;"	s
s_wall	cub3d.h	/^typedef struct	s_wall$/;"	s
self	game_map/map.h	/^	char	self;$/;"	m	struct:s_direction
set_east_texture	txt_helper.c	/^void	set_east_texture(t_txt *txt)$/;"	f
set_initial_player_position	game_map/map_information.c	/^static void	set_initial_player_position($/;"	f	file:
set_map_information	game_map/map_information.c	/^void		set_map_information(t_map *map)$/;"	f
set_map_width	game_map/fill_map_third.c	/^static void		set_map_width(t_map *map, const char *line)$/;"	f	file:
set_north_texture	txt_helper.c	/^void	set_north_texture(t_txt *txt)$/;"	f
set_ray_direction	rays_helper.c	/^void	set_ray_direction(t_ray *ray)$/;"	f
set_south_texture	txt_helper.c	/^void	set_south_texture(t_txt *txt)$/;"	f
set_sp_initial_position	game_map/sprite.c	/^void		set_sp_initial_position(t_map *map)$/;"	f
set_sprite_angle	sprite_methods.c	/^static void	set_sprite_angle(t_sp *sprite, float *angle)$/;"	f	file:
set_sprites_distance	sprite_methods.c	/^void		set_sprites_distance(void)$/;"	f
set_west_texture	txt_helper.c	/^void	set_west_texture(t_txt *txt)$/;"	f
setpoint	math_helper.c	/^void	setpoint(t_point *p, int x, int y)$/;"	f
settexture	txt.c	/^void	settexture(t_ray *ray)$/;"	f
setup	cub3d.c	/^static void	setup(const char *map_name)$/;"	f	file:
size	cub3d.h	/^	uint32_t	size;$/;"	m	struct:s_bitmapheader
slide	player_methods.c	/^static void	slide(float nplayer_x, float nplayer_y)$/;"	f	file:
so	game_map/map.h	/^	t_image	*so;$/;"	m	struct:s_map
sp_head	game_map/map.h	/^	t_data	*sp_head;$/;"	m	struct:s_map
sprite_pixel_get	mlx_helper.c	/^int		sprite_pixel_get(int x, int y)$/;"	f
square	draw.c	/^void	square(float x, float y, float width, int color)$/;"	f
stop_audio	audio.c	/^void	stop_audio(void)$/;"	f
stop_audio	game_map/audio.c	/^void	stop_audio(void)$/;"	f
storing_ray_content	cast.c	/^static void	storing_ray_content(t_ray *ray, t_horz *horz, t_vert *vert)$/;"	f	file:
str_allocation	libft/ft_split.c	/^static	char	*str_allocation(char const *s, char c, int start)$/;"	f	file:
str_join	get_next_line/get_next_line_utils.c	/^char		*str_join(char *buffer, char *tmp, int read_return, int i)$/;"	f
strings	game_map/map.h	/^	char	**strings;$/;"	m	struct:s_localmap
sub_str	get_next_line/get_next_line_utils.c	/^char		*sub_str(char const *s, unsigned int start)$/;"	f
swap	linkedlist/swap.c	/^void	swap(t_data *this, t_data *other)$/;"	f
t_bitmapheader	cub3d.h	/^}				t_bitmapheader;$/;"	t	typeref:struct:s_bitmapheader
t_data	linkedlist/linkedlist.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_direction	game_map/map.h	/^}				t_direction;$/;"	t	typeref:struct:s_direction
t_horz	cub3d.h	/^}				t_horz;$/;"	t	typeref:struct:s_horz
t_image	game_map/map.h	/^}				t_image;$/;"	t	typeref:struct:s_image
t_list	get_next_line/get_next_line.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_localmap	game_map/map.h	/^}				t_localmap;$/;"	t	typeref:struct:s_localmap
t_map	game_map/map.h	/^}				t_map;$/;"	t	typeref:struct:s_map
t_player	cub3d.h	/^}				t_player;$/;"	t	typeref:struct:s_player
t_point	cub3d.h	/^}				t_point;$/;"	t	typeref:struct:s_point
t_ray	cub3d.h	/^}				t_ray;$/;"	t	typeref:struct:s_ray
t_sp	game_map/map.h	/^}				t_sp;$/;"	t	typeref:struct:s_sp
t_txt	cub3d.h	/^}				t_txt;$/;"	t	typeref:struct:s_txt
t_vars	game_map/map.h	/^}				t_vars;$/;"	t	typeref:struct:s_vars
t_vert	cub3d.h	/^}				t_vert;$/;"	t	typeref:struct:s_vert
t_wall	cub3d.h	/^}				t_wall;$/;"	t	typeref:struct:s_wall
take_screenshot	screenshot.c	/^void	take_screenshot(void)$/;"	f
texture_init	txt.c	/^void	texture_init(void)$/;"	f
texture_pixel_get	mlx_helper.c	/^int		texture_pixel_get(int x, int y)$/;"	f
turn_direction	cub3d.h	/^	int		turn_direction;$/;"	m	struct:s_player
turn_speed	cub3d.h	/^	float	turn_speed;$/;"	m	struct:s_player
up	game_map/map.h	/^	char	up;$/;"	m	struct:s_direction
update	game.c	/^static void	update(void)$/;"	f	file:
vars	vars.c	/^t_vars			*vars(void)$/;"	f
vars_init	vars.c	/^static t_vars	*vars_init(void)$/;"	f	file:
vert_wall_content	cub3d.h	/^	int		vert_wall_content;$/;"	m	struct:s_vert
vert_wall_hit_x	cub3d.h	/^	float	vert_wall_hit_x;$/;"	m	struct:s_vert
vert_wall_hit_y	cub3d.h	/^	float	vert_wall_hit_y;$/;"	m	struct:s_vert
vertical_intersection	vert_intersection.c	/^void		vertical_intersection(t_ray *ray, t_vert *vert)$/;"	f
w	game_map/map.h	/^	int		w;$/;"	m	struct:s_image
walk_direction	cub3d.h	/^	int		walk_direction;$/;"	m	struct:s_player
walk_speed	cub3d.h	/^	float	walk_speed;$/;"	m	struct:s_player
wall_bottom_pixel	cub3d.h	/^	int			wall_bottom_pixel;$/;"	m	struct:s_wall
wall_conditions	game_map/fill_directions.c	/^static int			wall_conditions(t_direction dire)$/;"	f	file:
wall_hit_content	cub3d.h	/^	int		wall_hit_content;$/;"	m	struct:s_ray
wall_hit_x	cub3d.h	/^	float	wall_hit_x;$/;"	m	struct:s_ray
wall_hit_y	cub3d.h	/^	float	wall_hit_y;$/;"	m	struct:s_ray
wall_projection	projection_helper.c	/^void	wall_projection(int col, t_ray *ray, t_wall *wall)$/;"	f
wall_strip_height	cub3d.h	/^	float		wall_strip_height;$/;"	m	struct:s_wall
wall_top_pixel	cub3d.h	/^	int			wall_top_pixel;$/;"	m	struct:s_wall
walls_closed	game_map/map_wall.c	/^static int			walls_closed(t_data *maparr)$/;"	f	file:
was_hit_vertical	cub3d.h	/^	int		was_hit_vertical;$/;"	m	struct:s_ray
we	game_map/map.h	/^	t_image	*we;$/;"	m	struct:s_map
width	cub3d.h	/^	float	width;$/;"	m	struct:s_player
width	cub3d.h	/^	int		width;$/;"	m	struct:s_txt
width	cub3d.h	/^	int32_t		width;$/;"	m	struct:s_bitmapheader
width_in_bytes	cub3d.h	/^	int			width_in_bytes;$/;"	m	struct:s_bitmapheader
win	game_map/map.h	/^	void *win;$/;"	m	struct:s_vars
win_height	game_map/map.h	/^	int		win_height;$/;"	m	struct:s_map
win_width	game_map/map.h	/^	int		win_width;$/;"	m	struct:s_map
x	cub3d.h	/^	float	x;$/;"	m	struct:s_player
x	cub3d.h	/^	float	x;$/;"	m	struct:s_point
x	game_map/map.h	/^	float	x;$/;"	m	struct:s_sp
xfree	linkedlist/allocation.c	/^void		xfree(void *data)$/;"	f
xfree_after_head	linkedlist/allocation.c	/^static int	xfree_after_head(t_data *node, void *data)$/;"	f	file:
xfree_double_pointer	linkedlist/linkedlist_utils.c	/^void	xfree_double_pointer(char **ptr)$/;"	f
xmalloc	linkedlist/allocation.c	/^void		*xmalloc(size_t size)$/;"	f
xstrdup	linkedlist/utils.c	/^char		*xstrdup(const char *s)$/;"	f
xstrjoin	linkedlist/utils.c	/^char		*xstrjoin(const char *s1, const char *s2)$/;"	f
y	cub3d.h	/^	float	y;$/;"	m	struct:s_player
y	cub3d.h	/^	float	y;$/;"	m	struct:s_point
y	game_map/map.h	/^	float	y;$/;"	m	struct:s_sp
zero_condition	libft/ft_itoa.c	/^static char	*zero_condition(void)$/;"	f	file:
