!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_SIZE	get_next_line/get_next_line.h	/^# define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	game_map/Makefile	/^CC = gcc$/;"	m
CC	get_next_line/Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CC	linkedlist/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra \\$/;"	m
CFLAGS	game_map/Makefile	/^CFLAGS = -Wall -Werror -Wextra -g$/;"	m
CFLAGS	get_next_line/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	linkedlist/Makefile	/^CFLAGS = -Wall -Werror -Wextra$/;"	m
COLOR_BLACK	cub3d.h	/^# define COLOR_BLACK /;"	d
COLOR_WHITE	cub3d.h	/^# define COLOR_WHITE /;"	d
CUB3D_H	cub3d.h	/^# define CUB3D_H$/;"	d
ERROR_CL	cub3d.c	/^#define ERROR_CL /;"	d	file:
FOV_ANGLE	cub3d.h	/^# define FOV_ANGLE /;"	d
GET_NEXT_LINE_H	get_next_line/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GET_NEXT_LINE_OBJ	Makefile	/^GET_NEXT_LINE_OBJ = get_next_line\/*.o$/;"	m
INT_MAX	cub3d.h	/^# define INT_MAX /;"	d
KEY_A	cub3d.h	/^# define KEY_A /;"	d
KEY_D	cub3d.h	/^# define KEY_D /;"	d
KEY_ESC	cub3d.h	/^# define KEY_ESC /;"	d
KEY_LEFT_ARROW	cub3d.h	/^# define KEY_LEFT_ARROW /;"	d
KEY_RIGHT_ARROW	cub3d.h	/^# define KEY_RIGHT_ARROW /;"	d
KEY_S	cub3d.h	/^# define KEY_S /;"	d
KEY_W	cub3d.h	/^# define KEY_W /;"	d
LIB	Makefile	/^LIB = libcub3d.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_OBJ	Makefile	/^LIBFT_OBJ = libft\/*.o$/;"	m
LINKEDLIST_H	linkedlist/linkedlist.h	/^# define LINKEDLIST_H$/;"	d
LL_OBJ	Makefile	/^LL_OBJ = linkedlist\/*.o$/;"	m
MAKE	Makefile	/^MAKE = make -C$/;"	m
MAP_H	game_map/map.h	/^# define MAP_H$/;"	d
MAP_OBJ	Makefile	/^MAP_OBJ = game_map\/*.o$/;"	m
MAX_WINDOW_HEIGHT	game_map/map.h	/^# define MAX_WINDOW_HEIGHT /;"	d
MAX_WINDOW_WIDTH	game_map/map.h	/^# define MAX_WINDOW_WIDTH /;"	d
MINIMAP_SCALE	cub3d.h	/^# define MINIMAP_SCALE /;"	d
MIN_WINDOW_HEIGHT	game_map/map.h	/^# define MIN_WINDOW_HEIGHT /;"	d
MIN_WINDOW_WIDTH	game_map/map.h	/^# define MIN_WINDOW_WIDTH /;"	d
NAME	Makefile	/^NAME = cub3D$/;"	m
NAME	game_map/Makefile	/^NAME = map.a$/;"	m
NAME	get_next_line/Makefile	/^NAME = libget_next_line.a$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	linkedlist/Makefile	/^NAME = linkedlist.a$/;"	m
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	game_map/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	get_next_line/Makefile	/^OBJ =	${SRC:.c=.o}$/;"	m
OBJ	libft/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OBJ	linkedlist/Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
SRC	Makefile	/^SRC = cub3d.c \\$/;"	m
SRC	game_map/Makefile	/^SRC = map.c \\$/;"	m
SRC	get_next_line/Makefile	/^SRC = get_next_line.c \\$/;"	m
SRC	libft/Makefile	/^SRC = ft_atoi.c \\$/;"	m
SRC	linkedlist/Makefile	/^SRC = linkedlist.c \\$/;"	m
TILE_SIZE	game_map/map.h	/^# define TILE_SIZE /;"	d
WINDOW_NAME	game_map/map.h	/^# define WINDOW_NAME /;"	d
add	linkedlist/linkedlist_utils.c	/^void	add(t_data **head, void *data)$/;"	f
add_double_pointer	linkedlist/linkedlist_utils.c	/^void	add_double_pointer(char **ptr)$/;"	f
add_sp	game_map/map_wall.c	/^static void			add_sp(char *line, unsigned int start, unsigned int end)$/;"	f	file:
allocate_line	get_next_line/get_next_line_utils.c	/^int			allocate_line(char **line, char **buffer)$/;"	f
buffer	get_next_line/get_next_line.h	/^	char			*buffer;$/;"	m	struct:s_list
cast	rays.c	/^void	cast(t_ray *ray)$/;"	f
cast_all_rays	rays.c	/^void	cast_all_rays(void)$/;"	f
check_allfilled	game_map/check_allfilled.c	/^void	check_allfilled(t_map *map)$/;"	f
check_equality	libft/ft_strnstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_equality	libft/ft_strstr.c	/^static int	check_equality(const char *h, const char *n, int i)$/;"	f	file:
check_map	game_map/fill_map_third.c	/^static int		check_map(t_map *map, const char *line, int *p)$/;"	f	file:
clear	utils.c	/^void	clear(int color)$/;"	f
cols	game_map/map.h	/^	int		cols;$/;"	m	struct:s_map
convert_spacesto_wall	game_map/map_information.c	/^static void	convert_spacesto_wall(char *maparr)$/;"	f	file:
count_words	libft/ft_split.c	/^static	int		count_words(char const *s, char c)$/;"	f	file:
crgb	game_map/map.h	/^	int		crgb[3];$/;"	m	struct:s_map
data	linkedlist/linkedlist.h	/^	void			*data;$/;"	m	struct:s_data
distance	cub3d.h	/^	float	distance;$/;"	m	struct:s_ray
distance_between_points	utils.c	/^float	distance_between_points(float x1, float y1, float x2, float y2)$/;"	f
down	game_map/map.h	/^	char	down;$/;"	m	struct:s_direction
ea	game_map/map.h	/^	t_image	*ea;$/;"	m	struct:s_map
error	linkedlist/error.c	/^void	error(void)$/;"	f
error_map	linkedlist/error.c	/^void	error_map(const char *file_name, const char *message)$/;"	f
error_message	linkedlist/error.c	/^void	error_message(const char *message)$/;"	f
error_special	linkedlist/error.c	/^void	error_special(const char *message)$/;"	f
fd	game_map/map.h	/^	int		fd;$/;"	m	struct:s_localmap
fd	get_next_line/get_next_line.h	/^	int				fd;$/;"	m	struct:s_list
fill_c	game_map/fill_map_second.c	/^void		fill_c(t_map *map, const char **strings)$/;"	f
fill_directions	game_map/fill_directions.c	/^int					fill_directions(char *previous, char *current, char *next)$/;"	f
fill_ea	game_map/fill_map_second.c	/^void		fill_ea(t_map *map, const char **strings)$/;"	f
fill_f	game_map/fill_map_second.c	/^void		fill_f(t_map *map, const char **strings)$/;"	f
fill_map	game_map/fill_map_third.c	/^void			fill_map(t_map *map, t_data **maparr, const char *line, int *p)$/;"	f
fill_map_withspaces	game_map/map_wall.c	/^static void			fill_map_withspaces(t_data *maparr, int map_width)$/;"	f	file:
fill_maparr	game_map/fill_map.c	/^void	fill_maparr(t_map *map, t_data *maparr)$/;"	f
fill_no	game_map/fill_map_first.c	/^void		fill_no(t_map *map, const char **strings)$/;"	f
fill_r	game_map/fill_map_first.c	/^void		fill_r(t_map *map, const char **strings)$/;"	f
fill_r_norm	game_map/fill_map_first.c	/^static void	fill_r_norm(t_map *map, const char **strings, int i, int *position)$/;"	f	file:
fill_s	game_map/fill_map_second.c	/^void		fill_s(t_map *map, const char **strings)$/;"	f
fill_so	game_map/fill_map_first.c	/^void		fill_so(t_map *map, const char **strings)$/;"	f
fill_we	game_map/fill_map_first.c	/^void		fill_we(t_map *map, const char **strings)$/;"	f
finish	linkedlist/error.c	/^void	finish(void)$/;"	f
free_node	linkedlist/linkedlist.c	/^void	free_node(t_data *node)$/;"	f
frgb	game_map/map.h	/^	int		frgb[3];$/;"	m	struct:s_map
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_countchar	libft/ft_countchar.c	/^int		ft_countchar(const char *s, char c)$/;"	f
ft_dec2hex	libft/ft_dec2hex.c	/^char		*ft_dec2hex(size_t decimal)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isstrdigit	libft/ft_isstrdigit.c	/^int		ft_isstrdigit(const char *s)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(long n)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_onlyspaces	libft/ft_onlyspaces.c	/^int		ft_onlyspaces(const char *s)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(const char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(const char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(const char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *h, const char *n, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char		*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/ft_dec2hex.c	/^static void	ft_strrev(char *str)$/;"	f	file:
ft_strstr	libft/ft_strstr.c	/^char		*ft_strstr(const char *h, const char *n)$/;"	f
ft_strtoupper	libft/ft_strtoupper.c	/^char		*ft_strtoupper(char *s)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim_helper	libft/ft_strtrim.c	/^static char	*ft_strtrim_helper(char const *s1, int start, int end)$/;"	f	file:
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
game_exit	game.c	/^void	game_exit(void)$/;"	f
game_loop	game.c	/^void	game_loop(void)$/;"	f
get_fd_buffer	get_next_line/get_next_line.c	/^static char		**get_fd_buffer(int fd, t_list **buffers)$/;"	f	file:
get_head_node	linkedlist/allocation.c	/^t_data		**get_head_node(void)$/;"	f
get_initial_angle	player.c	/^static float	get_initial_angle(void)$/;"	f	file:
get_length	libft/ft_split.c	/^static	int		get_length(char const *s, int c, int start)$/;"	f	file:
get_mlx	game_map/map_helper.c	/^void			*get_mlx(void)$/;"	f
get_next_line	get_next_line/get_next_line.c	/^int				get_next_line(int fd, char **line)$/;"	f
gettexture	txt.c	/^static t_txt	*gettexture(void)$/;"	f	file:
h	game_map/map.h	/^	int		h;$/;"	m	struct:s_image
has_wall_at	collision.c	/^int		has_wall_at(float x, float y)$/;"	f
have_a_newline	get_next_line/get_next_line_utils.c	/^int			have_a_newline(char *str)$/;"	f
have_strings	game_map/fill_map.c	/^int		have_strings(const char **strings, int count)$/;"	f
height	cub3d.h	/^	float	height;$/;"	m	struct:s_player
height	cub3d.h	/^	int		height;$/;"	m	struct:s_txt
hexer	libft/ft_dec2hex.c	/^static char	*hexer(int l)$/;"	f	file:
i	game_map/map.h	/^	int		i;$/;"	m	struct:s_localmap
id_count	game_map/map.h	/^	int		id_count;$/;"	m	struct:s_localmap
img	cub3d.h	/^	void	*img;$/;"	m	struct:s_txt
img	game_map/map.h	/^	void *img;$/;"	m	struct:s_vars
imgarr	game_map/map.h	/^	void	*imgarr;$/;"	m	struct:s_image
init_localmap	game_map/map_utils.c	/^t_localmap	*init_localmap(void)$/;"	f
initial_pos	game_map/map.h	/^	int		initial_pos[2];$/;"	m	struct:s_map
input_handler	input.c	/^void		input_handler(void)$/;"	f
integer_length	libft/ft_putnbr_fd.c	/^static int	integer_length(int nb)$/;"	f	file:
is_inside_map	map_methods.c	/^int		is_inside_map(float x, float y)$/;"	f
is_inside_texture	map_methods.c	/^int		is_inside_texture(float x, float y, int txt_width, int txt_height)$/;"	f
is_inside_window	map_methods.c	/^int		is_inside_window(float x, float y)$/;"	f
is_map_walls_closed	game_map/map_wall.c	/^int					is_map_walls_closed(t_map *map, t_data *maparr)$/;"	f
is_ray_facing_down	cub3d.h	/^	int		is_ray_facing_down;$/;"	m	struct:s_ray
is_ray_facing_left	cub3d.h	/^	int		is_ray_facing_left;$/;"	m	struct:s_ray
is_ray_facing_right	cub3d.h	/^	int		is_ray_facing_right;$/;"	m	struct:s_ray
is_ray_facing_up	cub3d.h	/^	int		is_ray_facing_up;$/;"	m	struct:s_ray
is_set	libft/ft_strtrim.c	/^static int	is_set(char const *set, char c)$/;"	f	file:
l_lstnew	get_next_line/get_next_line_utils.c	/^t_list		*l_lstnew(int fd)$/;"	f
l_lstremove	get_next_line/get_next_line.c	/^static void		l_lstremove(int fd, t_list **buffers)$/;"	f	file:
l_lstremove_afterhead	get_next_line/get_next_line.c	/^static void		l_lstremove_afterhead(int fd, t_list *node)$/;"	f	file:
left	game_map/map.h	/^	char	left;$/;"	m	struct:s_direction
line	game_map/map.h	/^	char	*line;$/;"	m	struct:s_localmap
line	utils.c	/^void	line(t_point p0, t_point p1, int color)$/;"	f
line_allocation	get_next_line/get_next_line.c	/^static int		line_allocation(t_list **bs, char **li, char **buf, int fd)$/;"	f	file:
line_end	game_map/map.h	/^	int		line_end;$/;"	m	struct:s_localmap
lst_add_back	linkedlist/linkedlist.c	/^void	lst_add_back(t_data **head, t_data *node)$/;"	f
lst_add_front	linkedlist/linkedlist.c	/^void	lst_add_front(t_data **head, t_data *node)$/;"	f
lst_clear	linkedlist/linkedlist.c	/^void	lst_clear(t_data *head)$/;"	f
lst_last	linkedlist/linkedlist.c	/^t_data	*lst_last(t_data *node)$/;"	f
lst_size	linkedlist/linkedlist_utils.c	/^int				lst_size(t_data *head)$/;"	f
main	cub3d.c	/^int			main(int argc, char **argv)$/;"	f
map	game_map/map.h	/^	t_map	*map;$/;"	m	struct:s_localmap
map	game_map/map_helper.c	/^t_map			*map(void)$/;"	f
map_double	game_map/map_helper.c	/^static t_map	**map_double(void)$/;"	f	file:
map_height	game_map/map.h	/^	int		map_height;$/;"	m	struct:s_map
map_init	game_map/map_helper.c	/^void			map_init(const char *map_name)$/;"	f
map_reached	game_map/map.h	/^	int		map_reached;$/;"	m	struct:s_localmap
map_time	game_map/map.h	/^	int		map_time;$/;"	m	struct:s_localmap
map_width	game_map/map.h	/^	int		map_width;$/;"	m	struct:s_map
maparr	game_map/map.h	/^	char	*maparr;$/;"	m	struct:s_map
maparr	game_map/map.h	/^	t_data	*maparr;$/;"	m	struct:s_localmap
minimap_render	map_methods.c	/^void	minimap_render()$/;"	f
mlx	game_map/map.h	/^	void *mlx;$/;"	m	struct:s_vars
move_player	player_methods.c	/^void	move_player(void)$/;"	f
name	game_map/map.h	/^	char	*name;$/;"	m	struct:s_map
negative_condition	libft/ft_itoa.c	/^static char	*negative_condition(long n)$/;"	f	file:
new_map	game_map/map_utils.c	/^t_map		*new_map(void)$/;"	f
new_node	linkedlist/linkedlist_utils.c	/^t_data	*new_node(void *data)$/;"	f
next	get_next_line/get_next_line.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	linkedlist/linkedlist.h	/^	struct s_data	*next;$/;"	m	struct:s_data	typeref:struct:s_data::s_data
no	game_map/map.h	/^	t_image	*no;$/;"	m	struct:s_map
norm	game_map/fill_directions.c	/^static void			norm(t_direction *dire, char *previous,$/;"	f	file:
normalize_angle	utils.c	/^float	normalize_angle(float angle) {$/;"	f
norminette_helper	libft/ft_split.c	/^static	char	**norminette_helper(char const *s, char c, char **str, int j)$/;"	f	file:
num_rays	game_map/map.h	/^	int		num_rays;$/;"	m	struct:s_map
numlen	libft/ft_itoa.c	/^static long	numlen(long n)$/;"	f	file:
on_key_pressed	input.c	/^static int	on_key_pressed(int key, void *param)$/;"	f	file:
on_key_released	input.c	/^static int	on_key_released(int key, void *param)$/;"	f	file:
on_window_closed	input.c	/^static int	on_window_closed(int key, void *param)$/;"	f	file:
pixel_get	utils.c	/^int		pixel_get(int x, int y, void *img, int txt_width, int txt_height)$/;"	f
pixel_put	utils.c	/^void	pixel_put(int x, int y, int color)$/;"	f
player	player.c	/^t_player	*player(void)$/;"	f
player_init	player.c	/^static t_player	*player_init(void)$/;"	f	file:
player_render	player_methods.c	/^void	player_render(void)$/;"	f
player_state	game_map/map.h	/^	int		player_state;$/;"	m	struct:s_localmap
power_ten	libft/ft_putnbr_fd.c	/^static int	power_ten(int power)$/;"	f	file:
pview	game_map/map.h	/^	char	pview;$/;"	m	struct:s_map
ray	rays.c	/^t_ray	*ray(float ray_angle)$/;"	f
ray_angle	cub3d.h	/^	float	ray_angle;$/;"	m	struct:s_ray
rays	rays.c	/^t_ray	**rays(void)$/;"	f
rays_init	rays.c	/^void	rays_init(void)$/;"	f
rays_render	rays.c	/^void	rays_render(void)$/;"	f
read_map	game_map/map.c	/^t_map			*read_map(const char *file_name)$/;"	f
read_map_1	game_map/map.c	/^static void		read_map_1(t_localmap *localmap)$/;"	f	file:
read_map_2	game_map/map.c	/^static int		read_map_2(t_localmap *localmap)$/;"	f	file:
read_map_3	game_map/map.c	/^static int		read_map_3(t_localmap *localmap)$/;"	f	file:
read_map_4	game_map/map.c	/^static int		read_map_4(t_localmap *localmap)$/;"	f	file:
read_map_5	game_map/map_norm.c	/^void		read_map_5(t_localmap *localmap)$/;"	f
read_map_6	game_map/map_norm.c	/^void		read_map_6(t_localmap *localmap)$/;"	f
rect	utils.c	/^void	rect(t_point p, int width, int height, int color)$/;"	f
release_textures	txt.c	/^void			release_textures(void)$/;"	f
render	game.c	/^void	render(void)$/;"	f
render_projection_walls	projection.c	/^void	render_projection_walls(void)$/;"	f
rgb	utils.c	/^int		rgb(int r, int g, int b)$/;"	f
rgbstr_to_rgbint	game_map/fill_map_second.c	/^static void	rgbstr_to_rgbint(int *rgbint, char *rgbstr, t_map *map)$/;"	f	file:
right	game_map/map.h	/^	char	right;$/;"	m	struct:s_direction
rotation_angle	cub3d.h	/^	float	rotation_angle;$/;"	m	struct:s_player
rows	game_map/map.h	/^	int		rows;$/;"	m	struct:s_map
s	game_map/map.h	/^	t_image	*s;$/;"	m	struct:s_map
s_data	linkedlist/linkedlist.h	/^typedef struct	s_data$/;"	s
s_direction	game_map/map.h	/^typedef struct	s_direction$/;"	s
s_image	game_map/map.h	/^typedef struct	s_image$/;"	s
s_list	get_next_line/get_next_line.h	/^typedef	struct	s_list$/;"	s
s_localmap	game_map/map.h	/^typedef struct	s_localmap$/;"	s
s_map	game_map/map.h	/^typedef struct	s_map$/;"	s
s_player	cub3d.h	/^typedef struct	s_player$/;"	s
s_point	cub3d.h	/^typedef struct	s_point$/;"	s
s_ray	cub3d.h	/^typedef struct	s_ray$/;"	s
s_txt	cub3d.h	/^typedef struct	s_txt$/;"	s
s_vars	game_map/map.h	/^typedef struct	s_vars$/;"	s
self	game_map/map.h	/^	char	self;$/;"	m	struct:s_direction
set_east_texture	txt_helper.c	/^void	set_east_texture(t_txt *txt)$/;"	f
set_initial_player_position	game_map/map_information.c	/^static void	set_initial_player_position($/;"	f	file:
set_map_information	game_map/map_information.c	/^void		set_map_information(t_map *map)$/;"	f
set_map_width	game_map/fill_map_third.c	/^static void		set_map_width(t_map *map, const char *line)$/;"	f	file:
set_north_texture	txt_helper.c	/^void	set_north_texture(t_txt *txt)$/;"	f
set_num_rays	game_map/map_information.c	/^static void	set_num_rays(t_map *map)$/;"	f	file:
set_south_texture	txt_helper.c	/^void	set_south_texture(t_txt *txt)$/;"	f
set_west_texture	txt_helper.c	/^void	set_west_texture(t_txt *txt)$/;"	f
settexture	txt.c	/^t_txt			*settexture(t_ray *ray)$/;"	f
setup	cub3d.c	/^static void	setup(const char *map_name)$/;"	f	file:
so	game_map/map.h	/^	t_image	*so;$/;"	m	struct:s_map
square	utils.c	/^void	square(int x, int y, int width, int color)$/;"	f
str_allocation	libft/ft_split.c	/^static	char	*str_allocation(char const *s, char c, int start)$/;"	f	file:
str_join	get_next_line/get_next_line_utils.c	/^char		*str_join(char *buffer, char *tmp, int read_return, int i)$/;"	f
strings	game_map/map.h	/^	char	**strings;$/;"	m	struct:s_localmap
sub_str	get_next_line/get_next_line_utils.c	/^char		*sub_str(char const *s, unsigned int start)$/;"	f
t_data	linkedlist/linkedlist.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_direction	game_map/map.h	/^}				t_direction;$/;"	t	typeref:struct:s_direction
t_image	game_map/map.h	/^}				t_image;$/;"	t	typeref:struct:s_image
t_list	get_next_line/get_next_line.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_localmap	game_map/map.h	/^}				t_localmap;$/;"	t	typeref:struct:s_localmap
t_map	game_map/map.h	/^}				t_map;$/;"	t	typeref:struct:s_map
t_player	cub3d.h	/^}				t_player;$/;"	t	typeref:struct:s_player
t_point	cub3d.h	/^}				t_point;$/;"	t	typeref:struct:s_point
t_ray	cub3d.h	/^}				t_ray;$/;"	t	typeref:struct:s_ray
t_txt	cub3d.h	/^}				t_txt;$/;"	t	typeref:struct:s_txt
t_vars	game_map/map.h	/^}				t_vars;$/;"	t	typeref:struct:s_vars
texture_init	txt.c	/^void			texture_init(void)$/;"	f
turn_direction	cub3d.h	/^	int		turn_direction;$/;"	m	struct:s_player
turn_speed	cub3d.h	/^	float	turn_speed;$/;"	m	struct:s_player
up	game_map/map.h	/^	char	up;$/;"	m	struct:s_direction
update	game.c	/^static void	update(void)$/;"	f	file:
vars	vars.c	/^t_vars	*vars(void)$/;"	f
vars_init	vars.c	/^static t_vars	*vars_init()$/;"	f	file:
w	game_map/map.h	/^	int		w;$/;"	m	struct:s_image
walk_direction	cub3d.h	/^	int		walk_direction;$/;"	m	struct:s_player
walk_speed	cub3d.h	/^	float	walk_speed;$/;"	m	struct:s_player
wall_conditions	game_map/fill_directions.c	/^static int			wall_conditions(t_direction dire)$/;"	f	file:
wall_hit_content	cub3d.h	/^	int		wall_hit_content;$/;"	m	struct:s_ray
wall_hit_x	cub3d.h	/^	float	wall_hit_x;$/;"	m	struct:s_ray
wall_hit_y	cub3d.h	/^	float	wall_hit_y;$/;"	m	struct:s_ray
walls_closed	game_map/map_wall.c	/^static int			walls_closed(t_data *maparr)$/;"	f	file:
was_hit_vertical	cub3d.h	/^	int		was_hit_vertical;$/;"	m	struct:s_ray
we	game_map/map.h	/^	t_image	*we;$/;"	m	struct:s_map
width	cub3d.h	/^	float	width;$/;"	m	struct:s_player
width	cub3d.h	/^	int		width;$/;"	m	struct:s_txt
win	game_map/map.h	/^	void *win;$/;"	m	struct:s_vars
win_height	game_map/map.h	/^	int		win_height;$/;"	m	struct:s_map
win_width	game_map/map.h	/^	int		win_width;$/;"	m	struct:s_map
x	cub3d.h	/^	float	x;$/;"	m	struct:s_player
x	cub3d.h	/^	float	x;$/;"	m	struct:s_point
xfree	linkedlist/allocation.c	/^void		xfree(void *data)$/;"	f
xfree_after_head	linkedlist/allocation.c	/^static int	xfree_after_head(t_data *node, void *data)$/;"	f	file:
xfree_double_pointer	linkedlist/linkedlist_utils.c	/^void	xfree_double_pointer(char **ptr)$/;"	f
xmalloc	linkedlist/allocation.c	/^void		*xmalloc(size_t size)$/;"	f
xstrdup	linkedlist/allocation.c	/^char		*xstrdup(const char *s)$/;"	f
xstrjoin	linkedlist/allocation.c	/^char		*xstrjoin(const char *s1, const char *s2)$/;"	f
y	cub3d.h	/^	float	y;$/;"	m	struct:s_player
y	cub3d.h	/^	float	y;$/;"	m	struct:s_point
zero_condition	libft/ft_itoa.c	/^static char	*zero_condition(void)$/;"	f	file:
